给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。

如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。

您可以假设除了数字 0 之外，这两个数都不会以 0 开头。
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def addTwoNumbers(self, l1: ListNode, l2: ListNode) -> ListNode:
        root = ListNode(0)  # 新链表结点进行结果存储
        new = root
        carry = 0  # 十进制计算，进位值，初始化为0
        while l1 or l2:  # 进行计算的两个结点非空
            v1 = v2 = 0  # 定义v1、v2变量，同时使某一个链表结束后依然可以进行加和操作
            if l1:  # 遍历链表直至尾结点
                v1 = l1.val  # 将l1结点的值赋给v1进行计算
                l1 = l1.next  # 指向下一个结点
            if l2:
                v2 = l2.val
                l2 = l2.next
            sum = v1 +v2 + carry  # 两个链表对应值相加
            carry = sum // 10  # 和值求除取整做下次进位值
            sum = sum % 10  # 和值求除取余为新链表的结点值
            new.next = ListNode(sum)
            new = new.next  # 指向下一个新链表下一个结点
        if carry:  # 原始两个链表全部遍历后，若最后一次加和有进位1，则需要在新链表中加入一个结点存储该进位值
            new.next = ListNode(1)
        return root.next
