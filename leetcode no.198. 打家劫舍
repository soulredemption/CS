class Solution(object):
    def rob(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        nums_sum1 = 0
        nums_sum2 = 0
        for i in range(0,len(nums),2):
            nums_sum1 += nums[i]
        for j in range(1,len(nums),2):
            nums_sum2 += nums[j]
        return max(nums_sum1,nums_sum2)
        
class Solution(object):
    def rob(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        last = 0
        now = 0
        for i in nums:
            last, now = now, max(last + i, now)
        return now 
        
class Solution(object):
    def rob(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        #动态规划。dp[i] = max(dp[i-2]+nums[i],dp[i-1]+nums[i])
        n = len(nums)
        if n == 0:
            return 0
        if n <= 2:
            return max(nums)
        i = 3
        dp = [nums[0]] + [nums[1]] + [nums[0] + nums[2]] + [0] * (n-3)
        while i < n:
            dp[i] = max(dp[i-2]+nums[i], dp[i-3]+nums[i])
            i += 1
        return max(dp)
